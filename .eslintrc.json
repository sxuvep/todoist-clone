{
	"root": true,
	"parser": "@typescript-eslint/parser",  // Specifies the ESLint parser
	"extends": [
		"eslint:recommended",  // Uses the recommended rules from @eslint-plugin-react
		"plugin:@typescript-eslint/eslint-recommended",
		"plugin:@typescript-eslint/recommended",  // Uses the recommended rules from @typescript-eslint/eslint-plugin
		"react-app",
		"prettier/@typescript-eslint", // Uses eslint-config-prettier to disable Eslint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
		"plugin:prettier/recommended" // Enables eslint-plugin-prettier and extends eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
	],

	"plugins": ["react-hooks","@typescript-eslint","prettier"],
	"rules": {
		"react-hooks/rules-of-hooks": "error",
		"react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
		"no-trailing-spaces": [2, { "skipBlankLines": true }],
		"no-unused-vars":"off",
		"@typescript-eslint/no-unused-vars": [
			"error"
		  ],
		  "@typescript-eslint/no-explicit-any":[
			  "off"
		  ],
		//we dont want to apply these rules to **.js and .jsx** files
		"@typescript-eslint/explicit-function-return-type": "off",
		"@typescript-eslint/explicit-module-boundary-types": "off"

	}
	//TODO: Enable these once the team gets confortable using typescript for return types
	// "overrides": [
	// 	{
	// 	  // enable the rules specifically for TypeScript files
	// 	  "files": ["*.ts", "*.tsx"],
	// 	  "rules": {
	// 		"@typescript-eslint/explicit-function-return-type": ["warn"],
	// 		"@typescript-eslint/explicit-module-boundary-types": ["warn"]
	// 	  }
	// 	}
	//   ]
}